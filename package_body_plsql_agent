create or replace PACKAGE BODY plsql_agent AS

  FUNCTION DBMS_OUTPUT_GET RETURN dbms_output_tab PIPELINED AS
    l_line   VARCHAR2(32767);
    l_status INTEGER;
  BEGIN
    LOOP
      DBMS_OUTPUT.GET_LINE(l_line, l_status);
      EXIT WHEN l_status != 0;
      PIPE ROW(dbms_output_rec(l_line));
    END LOOP;
    RETURN;
  END DBMS_OUTPUT_GET;

  PROCEDURE generate_and_execute(
    p_user_input IN VARCHAR2
  ) AS
    v_prompt       VARCHAR2(4000);
    v_llm_response CLOB;
    v_output_tab   dbms_output_tab; -- Use the table type for BULK COLLECT
    v_output       VARCHAR2(4000);  -- For concatenating the output

  BEGIN

    -- 1. Construct a generic prompt
    v_prompt := 'Write a valid and executable PL/SQL code block that follows these instructions:
    - Use and assign a variable named v_result.
    - Code should begin with a single line to initialize v_result to 0;
    - Code should output the result using DBMS_OUTPUT.PUT_LINE(''Result: '' || v_result);
    - Code should end with END;.
    - Do not include markdown formatting or explanationsâ€”return only the raw PL/SQL block.';

    v_prompt := v_prompt || ' Given operation: ' || p_user_input;

    -- 2. Call the LLM
    SELECT DBMS_CLOUD_AI.GENERATE(
            prompt       => v_prompt,
            profile_name => 'OCI_META_LLAMA',
            action       => 'chat'
          )
    INTO v_llm_response
    FROM dual;

    -- 3. Clean the response
    v_llm_response := TRIM(REPLACE(v_llm_response, '`', '')); -- Remove backticks and trim spaces

    -- Remove "sql" prefix if present
    IF SUBSTR(v_llm_response, 1, 3) = 'sql' THEN
      v_llm_response := SUBSTR(v_llm_response, 4);
      v_llm_response := TRIM(v_llm_response); -- remove any leading spaces after "sql"
    END IF;

    -- Remove "plsql" prefix if present
    IF SUBSTR(v_llm_response, 1, 5) = 'plsql' THEN
      v_llm_response := SUBSTR(v_llm_response, 6);
      v_llm_response := TRIM(v_llm_response); -- remove any leading spaces after "sql"
    END IF;

     -- Trim any extra space at the end
     v_llm_response := RTRIM(v_llm_response);

/*    -- 4. Ensure the response ends with END;
    IF NOT v_llm_response LIKE '%END;' THEN
      v_llm_response := v_llm_response || ' ;'; -- Append END; if it's missing
    END IF;*/

    -- 5. Print the generated code for verification
    DBMS_OUTPUT.PUT_LINE('Generated PL/SQL Code:');
    DBMS_OUTPUT.PUT_LINE(v_llm_response);

    -- 6. Execute the dynamically generated block
    DECLARE
      v_result NUMBER := 0; -- Local variable for EXECUTE IMMEDIATE
    BEGIN
      EXECUTE IMMEDIATE v_llm_response;

      -- Capture the DBMS_OUTPUT using a pipelined function
      SELECT * BULK COLLECT
      INTO   v_output_tab
      FROM   TABLE(DBMS_OUTPUT_GET);

      -- Concatenate the output lines into a single string
      v_output := '';
      FOR i IN 1..v_output_tab.COUNT LOOP
        v_output := v_output || v_output_tab(i).line || CHR(10); -- Add newline for readability
      END LOOP;

      -- Print the captured output
      DBMS_OUTPUT.PUT_LINE('Captured Output:');
      DBMS_OUTPUT.PUT_LINE(v_output);

    END;


  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error executing generated code: ' || SQLERRM);
  END generate_and_execute;

END plsql_agent;
/
